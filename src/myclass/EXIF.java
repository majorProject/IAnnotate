package myclass;

/* CVS $Id: $ */
 
import com.hp.hpl.jena.rdf.model.*;
 
/**
 * Vocabulary definitions from http://www.w3.org/2003/12/exif/ns 
 * @author Auto-generated by schemagen on 12 Sep 2012 14:14 
 */
public class EXIF {
    /** <p>The RDF model that holds the vocabulary terms</p> */
    private static Model m_model = ModelFactory.createDefaultModel();
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://www.w3.org/2003/12/exif/ns#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    /** <p>An Exif tag whose meaning is not known</p> */
    public static final Property _unknown = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#_unknown" );
    
    /** <p>The lens aperture. The unit is the APEX value.???????APEX??????????2??????????????????????'5'??????2^5=F5.6</p> */
    public static final Property apertureValue = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#apertureValue" );
    
    /** <p>Person who created the image</p> */
    public static final Property artist = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#artist" );
    
    /** <p>The number of bits per image component. In this standard each component of 
     *  the image is 8 bits, so the value for this tag is 8. See also SamplesPerPixel. 
     *  In JPEG compressed data a JPEG marker is used instead of this tag.</p>
     */
    public static final Property bitsPerSample = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#bitsPerSample" );
    
    /** <p>The value of brightness. The unit is the APEX value. Ordinarily it is given 
     *  in the range of -99.99 to 99.99. Note that if the numerator of the recorded 
     *  value is FFFFFFFF.H, Unknown shall be indicated.????????????????APEX???EV?????ISO?????????????Ev:Exposure, 
     *  Bv:BrightnessValue, Sv:SensitivityValue???Ev=Bv+Sv Sv=log^2(ISOSpeedRating/3.125)??????????ISO??100???Sv=5?ISO200???Sv=6?ISO125??Sv=5.32</p>
     */
    public static final Property brightnessValue = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#brightnessValue" );
    
    /** <p>CCD??????Color filter array(CFA)????????????RGB????????CFAPattern????? 02 
     *  02 00 01 01 02The color filter array (CFA) geometric pattern of the image 
     *  sensor when a one-chip color area sensor is used. It does not apply to all 
     *  sensing methods.</p>
     */
    public static final Property cfaPattern = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#cfaPattern" );
    
    /** <p>The color space information tag (ColorSpace) is always recorded as the color 
     *  space specifier. Normally sRGB (=1) is used to define the color space based 
     *  on the PC monitor conditions and environment.??????????sRGB</p>
     */
    public static final Property colorSpace = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#colorSpace" );
    
    /** <p>Information specific to compressed data. The channels of each component are 
     *  arranged in order from the 1st component to the 4th. For uncompressed data 
     *  the data arrangement is given in the PhotometricInterpretation tag. However, 
     *  since PhotometricInterpretation can only express the order of Y,Cb and Cr, 
     *  this tag is provided for cases when compressed data uses components other 
     *  than Y, Cb, and Cr and to enable support of other sequences.??????YCC?????????4???????????????????0:not 
     *  exist,1:Y,2:Cb,3:Cr,4:R,5:G,6:B</p>
     */
    public static final Property componentsConfiguration = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#componentsConfiguration" );
    
    /** <p>??????Information specific to compressed data. The compression mode used for 
     *  a compressed image is indicated in unit bits per pixel.</p>
     */
    public static final Property compressedBitsPerPixel = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#compressedBitsPerPixel" );
    
    /** <p>The compression scheme used for the image data. When a primary image is JPEG 
     *  compressed, this designation is not necessary and is omitted. When thumbnails 
     *  use JPEG compression, this tag value is set to 6.</p>
     */
    public static final Property compression = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#compression" );
    
    /** <p>The direction of contrast processing applied by the camera when the image 
     *  was shot.</p>
     */
    public static final Property contrast = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#contrast" );
    
    /** <p>????????????????????Copyright information. In this standard the tag is used 
     *  to indicate both the photographer and editor copyrights. It is the copyright 
     *  notice of the person or organization claiming rights to the image.</p>
     */
    public static final Property copyright = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#copyright" );
    
    /** <p>?????????????????????The use of special processing on image data, such as 
     *  rendering geared to output. When special processing is performed, the reader 
     *  is expected to disable or minimize any further processing.</p>
     */
    public static final Property customRendered = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#customRendered" );
    
    /** <p>The Exif field data type, such as ascii, byte, short etc.</p> */
    public static final Property datatype = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#datatype" );
    
    /** <p>a date information. Usually saved as YYYY:MM:DD (HH:MM:SS) format in Exif 
     *  data, but represented here as W3C-DTF format</p>
     */
    public static final Property date = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#date" );
    
    /** <p>An attribute relating to Date and/or Time</p> */
    public static final Property dateAndOrTime = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#dateAndOrTime" );
    
    /** <p>The date and time of image creation. In this standard it is the date and time 
     *  the file was changed.???????????????????????????DateTimeOrigina????</p>
     */
    public static final Property dateTime = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#dateTime" );
    
    /** <p>The date and time when the image was stored as digital data. If, for example, 
     *  an image was captured by DSC and at the same time the file was recorded, then 
     *  the DateTimeOriginal and DateTimeDigitized will have the same contents.????????????????????????DateTimeOriginal????</p>
     */
    public static final Property dateTimeDigitized = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#dateTimeDigitized" );
    
    /** <p>The date and time when the original image data was generated. For a DSC the 
     *  date and time the picture was taken are recorded.???????????????????</p>
     */
    public static final Property dateTimeOriginal = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#dateTimeOriginal" );
    
    /** <p>Information on the picture-taking conditions of a particular camera model. 
     *  The tag is used only to indicate the picture-taking conditions in the reader.</p>
     */
    public static final Property deviceSettingDescription = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#deviceSettingDescription" );
    
    /** <p>???????????????????The digital zoom ratio when the image was shot. If the 
     *  numerator of the recorded value is 0, this indicates that digital zoom was 
     *  not used.</p>
     */
    public static final Property digitalZoomRatio = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#digitalZoomRatio" );
    
    /** <p>A property that connects an IFD to one of its entries. Super property which 
     *  integrates all Exif tags.</p>
     */
    public static final Property exifAttribute = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#exifAttribute" );
    
    /** <p>Exif????????Exif Version</p> */
    public static final Property exifVersion = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#exifVersion" );
    
    /** <p>A pointer to the Exif IFD, which is a set of tags for recording Exif-specific 
     *  attribute information.Exif IFD??????</p>
     */
    public static final Property exif_IFD_Pointer = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#exif_IFD_Pointer" );
    
    /** <p>An Exif IFD data entry</p> */
    public static final Property exifdata = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#exifdata" );
    
    /** <p>?????????????APEX?(EV)The exposure bias. The unit is the APEX value. Ordinarily 
     *  it is given in the range of -99.99 to 99.99.</p>
     */
    public static final Property exposureBiasValue = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#exposureBiasValue" );
    
    /** <p>The exposure index selected on the camera or input device at the time the 
     *  image is captured.CCD???????????????????????ISOSpeedRatings???</p>
     */
    public static final Property exposureIndex = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#exposureIndex" );
    
    /** <p>the exposure mode set when the image was shot. In auto-bracketing mode, the 
     *  camera shoots a series of frames of the same scene at different exposure settings.?????</p>
     */
    public static final Property exposureMode = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#exposureMode" );
    
    /** <p>The class of the program used by the camera to set exposure when the picture 
     *  is taken.????????</p>
     */
    public static final Property exposureProgram = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#exposureProgram" );
    
    /** <p>?????????????????????Exposure time, given in seconds (sec).</p> */
    public static final Property exposureTime = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#exposureTime" );
    
    /** <p>F number????F?</p> */
    public static final Property fNumber = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#fNumber" );
    
    /** <p>?????????????????????3=DSCThe image source. If a DSC recorded the image, this 
     *  tag value of this tag always be set to 3, indicating that the image was recorded 
     *  on a DSC.</p>
     */
    public static final Property fileSource = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#fileSource" );
    
    /** <p>The status of flash when the image was shot.??????????</p> */
    public static final Property flash = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#flash" );
    
    /** <p>The strobe energy at the time the image is captured, as measured in Beam Candle 
     *  Power Seconds (BCPS).BCPS??????????</p>
     */
    public static final Property flashEnergy = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#flashEnergy" );
    
    /** <p>The Flashpix format version supported by a FPXR file. If the FPXR function 
     *  supports Flashpix format Ver. 1.0, this is indicated similarly to ExifVersion 
     *  by recording "0100" as 4-byte ASCII.</p>
     */
    public static final Property flashpixVersion = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#flashpixVersion" );
    
    /** <p>The actual focal length of the lens, in mm. Conversion is not made to the 
     *  focal length of a 35 mm film camera.????????????mm</p>
     */
    public static final Property focalLength = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#focalLength" );
    
    /** <p>The equivalent focal length assuming a 35mm film camera, in mm. A value of 
     *  0 means the focal length is unknown. Note that this tag differs from the FocalLength 
     *  tag.35mm????????</p>
     */
    public static final Property focalLengthIn35mmFilm = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#focalLengthIn35mmFilm" );
    
    /** <p>The unit for measuring FocalPlaneXResolution and FocalPlaneYResolution. This 
     *  value is the same as the ResolutionUnit.CCD???????</p>
     */
    public static final Property focalPlaneResolutionUnit = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#focalPlaneResolutionUnit" );
    
    /** <p>?????CCD??????????????FocalPlaneYResolution?FocalLength?????????????35mm????????????????200???????VGA????????????????????VGA?????????????????????CCD???????????????????????The 
     *  number of pixels in the image width (X) direction per FocalPlaneResolutionUnit 
     *  on the camera focal plane.</p>
     */
    public static final Property focalPlaneXResolution = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#focalPlaneXResolution" );
    
    /** <p>The number of pixels in the image height (Y) direction per FocalPlaneResolutionUnit 
     *  on the camera focal plane.?????CCD?????????</p>
     */
    public static final Property focalPlaneYResolution = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#focalPlaneYResolution" );
    
    /** <p>The degree of overall image gain adjustment.</p> */
    public static final Property gainControl = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gainControl" );
    
    /** <p>Geometric data such as latitude, longitude and altitude. Usually saved as 
     *  rational number.</p>
     */
    public static final Property geo = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#geo" );
    
    /** <p>The altitude based on the reference in GPSAltitudeRef. Altitude is expressed 
     *  as one RATIONAL value. The reference unit is meters.</p>
     */
    public static final Property gpsAltitude = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsAltitude" );
    
    /** <p>Indicates the altitude used as the reference altitude. If the reference is 
     *  sea level and the altitude is above sea level, 0 is given. If the altitude 
     *  is below sea level, a value of 1 is given and the altitude is indicated as 
     *  an absolute value in the GPSAltitude tag. The reference unit is meters.</p>
     */
    public static final Property gpsAltitudeRef = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsAltitudeRef" );
    
    /** <p>A character string recording the name of the GPS area. The first byte indicates 
     *  the character code used, and this is followed by the name of the GPS area.</p>
     */
    public static final Property gpsAreaInformation = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsAreaInformation" );
    
    /** <p>The GPS DOP (data degree of precision). An HDOP value is written during two-dimensional 
     *  measurement, and PDOP during three-dimensional measurement.</p>
     */
    public static final Property gpsDOP = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsDOP" );
    
    /** <p>date and time information relative to UTC (Coordinated Universal Time). The 
     *  record format is "YYYY:MM:DD" while converted to W3C-DTF to use in RDF</p>
     */
    public static final Property gpsDateStamp = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsDateStamp" );
    
    /** <p>The bearing to the destination point. The range of values is from 0.00 to 
     *  359.99.</p>
     */
    public static final Property gpsDestBearing = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsDestBearing" );
    
    /** <p>Indicates the reference used for giving the bearing to the destination point. 
     *  'T' denotes true direction and 'M' is magnetic direction.</p>
     */
    public static final Property gpsDestBearingRef = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsDestBearingRef" );
    
    /** <p>The distance to the destination point.</p> */
    public static final Property gpsDestDistance = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsDestDistance" );
    
    /** <p>Indicates the unit used to express the distance to the destination point. 
     *  'K', 'M' and 'N' represent kilometers, miles and knots.</p>
     */
    public static final Property gpsDestDistanceRef = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsDestDistanceRef" );
    
    /** <p>Latitude of destination, expressed as three values giving the degrees, minutes, 
     *  and seconds, respectively.</p>
     */
    public static final Property gpsDestLatitude = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsDestLatitude" );
    
    /** <p>Reference for latitude of destination</p> */
    public static final Property gpsDestLatitudeRef = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsDestLatitudeRef" );
    
    /** <p>Longitude of destination, expressed as three values giving the degrees, minutes, 
     *  and seconds, respectively.</p>
     */
    public static final Property gpsDestLongitude = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsDestLongitude" );
    
    /** <p>Reference for longitude of destination</p> */
    public static final Property gpsDestLongitudeRef = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsDestLongitudeRef" );
    
    /** <p>Indicates whether differential correction is applied to the GPS receiver.</p> */
    public static final Property gpsDifferential = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsDifferential" );
    
    /** <p>The direction of the image when it was captured. The range of values is from 
     *  0.00 to 359.99.</p>
     */
    public static final Property gpsImgDirection = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsImgDirection" );
    
    /** <p>The reference for giving the direction of the image when it is captured. 'T' 
     *  denotes true direction and 'M' is magnetic direction.</p>
     */
    public static final Property gpsImgDirectionRef = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsImgDirectionRef" );
    
    /** <p>An attribute relating to GPS information</p> */
    public static final Property gpsInfo = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsInfo" );
    
    /** <p>A pointer to the GPS IFD, which is a set of tags for recording GPS information.GPS 
     *  IFD??????</p>
     */
    public static final Property gpsInfo_IFD_Pointer = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsInfo_IFD_Pointer" );
    
    /** <p>??The latitude, expressed as three values giving the degrees, minutes, and 
     *  seconds, respectively.</p>
     */
    public static final Property gpsLatitude = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsLatitude" );
    
    /** <p>???????????Indicates whether the latitude is north or south latitude. The 
     *  ASCII value 'N' indicates north latitude, and 'S' is south latitude.</p>
     */
    public static final Property gpsLatitudeRef = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsLatitudeRef" );
    
    /** <p>The longitude, expressed as three values giving the degrees, minutes, and 
     *  seconds, respectively.??</p>
     */
    public static final Property gpsLongitude = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsLongitude" );
    
    /** <p>Indicates whether the longitude is east or west longitude. ASCII 'E' indicates 
     *  east longitude, and 'W' is west longitude.???????????</p>
     */
    public static final Property gpsLongitudeRef = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsLongitudeRef" );
    
    /** <p>????????'TOKYO'????'WGS-84'The geodetic survey data used by the GPS receiver. 
     *  If the survey data is restricted to Japan, the value of this tag is 'TOKYO' 
     *  or 'WGS-84'. If a GPS Info tag is recorded, it is strongly recommended that 
     *  this tag be recorded.</p>
     */
    public static final Property gpsMapDatum = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsMapDatum" );
    
    /** <p>The GPS measurement mode. '2' means two-dimensional measurement and '3' means 
     *  three-dimensional measurement is in progress.</p>
     */
    public static final Property gpsMeasureMode = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsMeasureMode" );
    
    /** <p>A character string recording the name of the method used for location finding. 
     *  The first byte indicates the character code used, and this is followed by 
     *  the name of the method.</p>
     */
    public static final Property gpsProcessingMethod = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsProcessingMethod" );
    
    /** <p>The GPS satellites used for measurements. This tag can be used to describe 
     *  the number of satellites, their ID number, angle of elevation, azimuth, SNR 
     *  and other information in ASCII notation. The format is not specified. If the 
     *  GPS receiver is incapable of taking measurements, value of the tag shall be 
     *  set to NULL.</p>
     */
    public static final Property gpsSatellites = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsSatellites" );
    
    /** <p>The speed of GPS receiver movement.</p> */
    public static final Property gpsSpeed = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsSpeed" );
    
    /** <p>The unit used to express the GPS receiver speed of movement. 'K' 'M' and 'N' 
     *  represents kilometers per hour, miles per hour, and knots.</p>
     */
    public static final Property gpsSpeedRef = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsSpeedRef" );
    
    /** <p>The status of the GPS receiver when the image is recorded. 'A' means measurement 
     *  is in progress, and 'V' means the measurement is Interoperability.</p>
     */
    public static final Property gpsStatus = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsStatus" );
    
    /** <p>The time as UTC (Coordinated Universal Time). TimeStamp is expressed as three 
     *  RATIONAL values giving the hour, minute, and second.</p>
     */
    public static final Property gpsTimeStamp = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsTimeStamp" );
    
    /** <p>The direction of GPS receiver movement. The range of values is from 0.00 to 
     *  359.99.</p>
     */
    public static final Property gpsTrack = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsTrack" );
    
    /** <p>The reference for giving the direction of GPS receiver movement. 'T' denotes 
     *  true direction and 'M' is magnetic direction.</p>
     */
    public static final Property gpsTrackRef = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsTrackRef" );
    
    /** <p>The version of GPSInfoIFD. The version is given as 2.2.0.0. This tag is mandatory 
     *  when GPSInfo tag is present.</p>
     */
    public static final Property gpsVersionID = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#gpsVersionID" );
    
    /** <p>Height of an object</p> */
    public static final Property height = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#height" );
    
    /** <p>A tag that refers a child IFD</p> */
    public static final Property ifdPointer = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#ifdPointer" );
    
    /** <p>An attribute relating to Image Configuration</p> */
    public static final Property imageConfig = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#imageConfig" );
    
    /** <p>An attribute relating to image data characteristics</p> */
    public static final Property imageDataCharacter = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#imageDataCharacter" );
    
    /** <p>An attribute relating to image data structure</p> */
    public static final Property imageDataStruct = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#imageDataStruct" );
    
    /** <p>A character string giving the title of the image. It may be a comment such 
     *  as "1988 company picnic" or the like. Two-byte character codes cannot be used. 
     *  When a 2-byte code is necessary, the Exif Private tag UserComment is to be 
     *  used.????????????????2???????????</p>
     */
    public static final Property imageDescription = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#imageDescription" );
    
    /** <p>Image height. The number of rows of image data. In JPEG compressed data a 
     *  JPEG marker is used.</p>
     */
    public static final Property imageLength = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#imageLength" );
    
    /** <p>An identifier assigned uniquely to each image. It is recorded as an ASCII 
     *  string equivalent to hexadecimal notation and 128-bit fixed length.</p>
     */
    public static final Property imageUniqueID = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#imageUniqueID" );
    
    /** <p>Image width. The number of columns of image data, equal to the number of pixels 
     *  per row. In JPEG compressed data a JPEG marker is used instead of this tag.</p>
     */
    public static final Property imageWidth = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#imageWidth" );
    
    /** <p>An attribute relating to Interoperability. Tags stored in Interoperability 
     *  IFD may be defined dependently to each Interoperability rule.</p>
     */
    public static final Property interopInfo = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#interopInfo" );
    
    /** <p>??????Interoperability IFD?????????ExifR98 v1.0???????'R98'?????????????Interoperability 
     *  IFD?????'THM'????Indicates the identification of the Interoperability rule. 
     *  'R98' = conforming to R98 file specification of Recommended Exif Interoperability 
     *  Rules (ExifR98) or to DCF basic file stipulated by Design Rule for Camera 
     *  File System. 'THM' = conforming to DCF thumbnail file stipulated by Design 
     *  rule for Camera File System.</p>
     */
    public static final Property interoperabilityIndex = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#interoperabilityIndex" );
    
    /** <p>???????ExifR98 v1.0???????'0100'?????Interoperability Version</p> */
    public static final Property interoperabilityVersion = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#interoperabilityVersion" );
    
    /** <p>A pointer to the Interoperability IFD, which is composed of tags storing the 
     *  information to ensure the InteroperabilityInteroperability IFD??????</p>
     */
    public static final Property interoperability_IFD_Pointer = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#interoperability_IFD_Pointer" );
    
    /** <p>Indicates the ISO Speed and ISO Latitude of the camera or input device as 
     *  specified in ISO 12232.CCD????????????</p>
     */
    public static final Property isoSpeedRatings = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#isoSpeedRatings" );
    
    /** <p>The offset to the start byte (SOI) of JPEG compressed thumbnail data. This 
     *  is not used for primary image JPEG data.?????????????????</p>
     */
    public static final Property jpegInterchangeFormat = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#jpegInterchangeFormat" );
    
    /** <p>??????????????The number of bytes of JPEG compressed thumbnail data. This 
     *  is not used for primary image JPEG data.</p>
     */
    public static final Property jpegInterchangeFormatLength = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#jpegInterchangeFormatLength" );
    
    /** <p>Length of an object. Could be a subProperty of other general schema.</p> */
    public static final Property length = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#length" );
    
    /** <p>Light source such as Daylight, Tungsten, Flash etc.???????????????????????????????????</p> */
    public static final Property lightSource = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#lightSource" );
    
    /** <p>Manufacturer of image input equipment??????????DCF????</p> */
    public static final Property make = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#make" );
    
    /** <p>Manufacturer notes???????????????????</p> */
    public static final Property makerNote = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#makerNote" );
    
    /** <p>??????F??ApertureValue??????2????????????????????The smallest F number of 
     *  the lens. The unit is the APEX value. Ordinarily it is given in the range 
     *  of 00.00 to 99.99, but it is not limited to this range.</p>
     */
    public static final Property maxApertureValue = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#maxApertureValue" );
    
    /** <p>A length with unit of meter</p> */
    public static final Property meter = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#meter" );
    
    /** <p>Metering mode, such as CenterWeightedAverage, Spot, MultiSpot,Pattern, Partial 
     *  etc.??????????</p>
     */
    public static final Property meteringMode = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#meteringMode" );
    
    /** <p>A length with unit of mm</p> */
    public static final Property mm = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#mm" );
    
    /** <p>????????DCF????Model of image input equipment</p> */
    public static final Property model = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#model" );
    
    /** <p>Indicates the Opto-Electric Conversion Function (OECF) specified in ISO 14524. 
     *  OECF is the relationship between the camera optical input and the image values.</p>
     */
    public static final Property oecf = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#oecf" );
    
    /** <p>????????(top-left???????????????????????The image orientation viewed in terms 
     *  of rows and columns.</p>
     */
    public static final Property orientation = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#orientation" );
    
    /** <p>Pixel composition. In JPEG compressed data a JPEG marker is used instead of 
     *  this tag.</p>
     */
    public static final Property photometricInterpretation = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#photometricInterpretation" );
    
    /** <p>An attribute relating to Picture-Taking Conditions</p> */
    public static final Property pictTaking = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#pictTaking" );
    
    /** <p>Brightness info for print image matching</p> */
    public static final Property pimBrightness = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#pimBrightness" );
    
    /** <p>ColorBalance info for print image matching</p> */
    public static final Property pimColorBalance = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#pimColorBalance" );
    
    /** <p>Contrast info for print image matching</p> */
    public static final Property pimContrast = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#pimContrast" );
    
    /** <p>An attribute relating to print image matching</p> */
    public static final Property pimInfo = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#pimInfo" );
    
    /** <p>Saturation info for print image matching</p> */
    public static final Property pimSaturation = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#pimSaturation" );
    
    /** <p>Sharpness info for print image matching</p> */
    public static final Property pimSharpness = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#pimSharpness" );
    
    /** <p>Information specific to compressed data. When a compressed file is recorded, 
     *  the valid width of the meaningful image shall be recorded in this tag, whether 
     *  or not there is padding data or a restart marker. This tag should not exist 
     *  in an uncompressed file.</p>
     */
    public static final Property pixelXDimension = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#pixelXDimension" );
    
    /** <p>Information specific to compressed data. When a compressed file is recorded, 
     *  the valid height of the meaningful image shall be recorded in this tag, whether 
     *  or not there is padding data or a restart marker. This tag should not exist 
     *  in an uncompressed file. Since data padding is unnecessary in the vertical 
     *  direction, the number of lines recorded in this valid image height tag will 
     *  in fact be the same as that recorded in the SOF.</p>
     */
    public static final Property pixelYDimension = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#pixelYDimension" );
    
    /** <p>Indicates whether pixel components are recorded in chunky or planar format. 
     *  In JPEG compressed files a JPEG marker is used instead of this tag. If this 
     *  field does not exist, the TIFF default of 1 (chunky) is assumed.</p>
     */
    public static final Property planarConfiguration = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#planarConfiguration" );
    
    /** <p>??????CCIR REcommendation 709 primaries??????????'640/1000,330/1000,300/1000,600/1000,150/1000,60/1000'????????ColorSpace?????????The 
     *  chromaticity of the three primary colors of the image. Normally this tag is 
     *  not necessary, since color space is specified in the color space information 
     *  tag (ColorSpace).</p>
     */
    public static final Property primaryChromaticities = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#primaryChromaticities" );
    
    /** <p>A pointer to the print image matching IFD</p> */
    public static final Property printImageMatching_IFD_Pointer = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#printImageMatching_IFD_Pointer" );
    
    /** <p>An attribute relating to recording offset</p> */
    public static final Property recOffset = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#recOffset" );
    
    /** <p>The reference black point value and reference white point value. The color 
     *  space is declared in a color space information tag, with the default being 
     *  the value that gives the optimal image characteristics Interoperability these 
     *  conditions.????????????YCbCr??????????????Y(??)?????????Cb????Cr???????????'0,255,0,128,0,128'?RGB??????R?G?B???????????????????????'0,255,0,255,0,255'?</p>
     */
    public static final Property referenceBlackWhite = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#referenceBlackWhite" );
    
    /** <p>Tag Relating to Related File Information</p> */
    public static final Property relatedFile = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#relatedFile" );
    
    /** <p>Related image file format?????????'Exif JPEG Ver. 2.1'???????????????????????</p> */
    public static final Property relatedImageFileFormat = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#relatedImageFileFormat" );
    
    /** <p>Related image length???????????????Interoperability IFD???</p> */
    public static final Property relatedImageLength = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#relatedImageLength" );
    
    /** <p>Related image width???????????????Interoperability IFD???</p> */
    public static final Property relatedImageWidth = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#relatedImageWidth" );
    
    /** <p>?????????????????????????????Related audio file</p> */
    public static final Property relatedSoundFile = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#relatedSoundFile" );
    
    /** <p>a rational number representing a resolution. Could be a subProperty of other 
     *  general schema.</p>
     */
    public static final Property resolution = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#resolution" );
    
    /** <p>The unit for measuring XResolution and YResolution. The same unit is used 
     *  for both XResolution and YResolution. If the image resolution in unknown, 
     *  2 (inches) is designated.XResolution/YResolution???????</p>
     */
    public static final Property resolutionUnit = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#resolutionUnit" );
    
    /** <p>The number of rows per strip. This is the number of rows in the image of one 
     *  strip when an image is divided into strips. With JPEG compressed data this 
     *  designation is not needed and is omitted.</p>
     */
    public static final Property rowsPerStrip = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#rowsPerStrip" );
    
    /** <p>The number of components per pixel. Since this standard applies to RGB and 
     *  YCbCr images, the value set for this tag is 3. In JPEG compressed data a JPEG 
     *  marker is used instead of this tag.</p>
     */
    public static final Property samplesPerPixel = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#samplesPerPixel" );
    
    /** <p>The direction of saturation processing applied by the camera when the image 
     *  was shot.</p>
     */
    public static final Property saturation = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#saturation" );
    
    /** <p>The type of scene that was shot. It can also be used to record the mode in 
     *  which the image was shot, such as Landscape, Portrait etc. Note that this 
     *  differs from the scene type (SceneType) tag.</p>
     */
    public static final Property sceneCaptureType = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#sceneCaptureType" );
    
    /** <p>The type of scene. If a DSC recorded the image, this tag value shall always 
     *  be set to 1, indicating that the image was directly photographed.????????????????????????1=A 
     *  directly photographed image</p>
     */
    public static final Property sceneType = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#sceneType" );
    
    /** <p>a mesurement of time length with unit of second</p> */
    public static final Property seconds = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#seconds" );
    
    /** <p>The image sensor type on the camera or input device, such as One-chip color 
     *  area sensor etc.????????????One-chip color area sensor?Color sequential area 
     *  sensor?Trilinear sensor??</p>
     */
    public static final Property sensingMethod = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#sensingMethod" );
    
    /** <p>The direction of sharpness processing applied by the camera when the image 
     *  was shot.</p>
     */
    public static final Property sharpness = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#sharpness" );
    
    /** <p>????????APEX???????2??????????????????????????????????'4'?????1/(2^4)=1/16?Shutter 
     *  speed. The unit is the APEX (Additive System of Photographic Exposure) setting</p>
     */
    public static final Property shutterSpeedValue = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#shutterSpeedValue" );
    
    /** <p>???????????????????????/????????????????The name and version of the software 
     *  or firmware of the camera or image input device used to generate the image.</p>
     */
    public static final Property software = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#software" );
    
    /** <p>This tag records the camera or input device spatial frequency table and SFR 
     *  values in the direction of image width, image height, and diagonal direction, 
     *  as specified in ISO 12233.</p>
     */
    public static final Property spatialFrequencyResponse = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#spatialFrequencyResponse" );
    
    /** <p>Indicates the spectral sensitivity of each channel of the camera used. The 
     *  tag value is an ASCII string compatible with the standard developed by the 
     *  ASTM Technical committee.</p>
     */
    public static final Property spectralSensitivity = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#spectralSensitivity" );
    
    /** <p>The total number of bytes in each strip. With JPEG compressed data this designation 
     *  is not needed and is omitted.</p>
     */
    public static final Property stripByteCounts = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#stripByteCounts" );
    
    /** <p>For each strip, the byte offset of that strip. With JPEG compressed data this 
     *  designation is not needed and is omitted.</p>
     */
    public static final Property stripOffsets = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#stripOffsets" );
    
    /** <p>DateTime subseconds</p> */
    public static final Property subSecTime = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#subSecTime" );
    
    /** <p>DateTimeDigitized subseconds</p> */
    public static final Property subSecTimeDigitized = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#subSecTimeDigitized" );
    
    /** <p>DateTimeOriginal subseconds</p> */
    public static final Property subSecTimeOriginal = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#subSecTimeOriginal" );
    
    /** <p>The location and area of the main subject in the overall scene.??????????????2????XY???3??????4??????????3?????????</p> */
    public static final Property subjectArea = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#subjectArea" );
    
    /** <p>The distance to the subject, given in meters. Note that if the numerator of 
     *  the recorded value is FFFFFFFF.H, Infinity shall be indicated; and if the 
     *  numerator is 0, Distance unknown shall be indicated.????????????m</p>
     */
    public static final Property subjectDistance = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#subjectDistance" );
    
    /** <p>The distance to the subject, such as Macro, Close View or Distant View.</p> */
    public static final Property subjectDistanceRange = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#subjectDistanceRange" );
    
    /** <p>??????????XY??The location of the main subject in the scene. The value of 
     *  this tag represents the pixel at the center of the main subject relative to 
     *  the left edge, prior to rotation processing as per the Rotation tag. The first 
     *  value indicates the X column number and second indicates the Y row number.</p>
     */
    public static final Property subjectLocation = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#subjectLocation" );
    
    /** <p>A tag used to record fractions of seconds for a date property</p> */
    public static final Property subseconds = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#subseconds" );
    
    /** <p>The Exif tag number</p> */
    public static final Property tag_number = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#tag_number" );
    
    /** <p>The Exif tag number with context prefix, such as IFD type or maker name</p> */
    public static final Property tagid = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#tagid" );
    
    /** <p>A transfer function for the image, described in tabular style. Normally this 
     *  tag is not necessary, since color space is specified in the color space information 
     *  tag (ColorSpace).</p>
     */
    public static final Property transferFunction = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#transferFunction" );
    
    /** <p>A tag for Exif users to write keywords or comments on the image besides those 
     *  in ImageDescription, and without the character code limitations of the ImageDescription 
     *  tag. The character code used in the UserComment tag is identified based on 
     *  an ID code in a fixed 8-byte area at the start of the tag data area.?????????ImageDescription???????????JIS2???????Unicode????????????????8?????????</p>
     */
    public static final Property userComment = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#userComment" );
    
    /** <p>An attribute relating to User Information</p> */
    public static final Property userInfo = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#userInfo" );
    
    /** <p>An attribute relating to Version</p> */
    public static final Property versionInfo = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#versionInfo" );
    
    /** <p>The white balance mode set when the image was shot.????????????</p> */
    public static final Property whiteBalance = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#whiteBalance" );
    
    /** <p>The chromaticity of the white point of the image. Normally this tag is not 
     *  necessary, since color space is specified in the color space information tag 
     *  (ColorSpace).??????CIE Standard Illuminant D65(?????????????)????????'3127/10000,3290/10000'????????ColorSpace?????????</p>
     */
    public static final Property whitePoint = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#whitePoint" );
    
    /** <p>Width of an object</p> */
    public static final Property width = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#width" );
    
    /** <p>The number of pixels per ResolutionUnit in the ImageWidth direction. When 
     *  the image resolution is unknown, 72 [dpi] is designated.???????????????</p>
     */
    public static final Property xResolution = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#xResolution" );
    
    /** <p>The matrix coefficients for transformation from RGB to YCbCr image data.RGB????YCbCr??????????3????????0.299?0.587?0.114????</p> */
    public static final Property yCbCrCoefficients = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#yCbCrCoefficients" );
    
    /** <p>The position of chrominance components in relation to the luminance component. 
     *  This field is designated only for JPEG compressed data or uncompressed YCbCr 
     *  data.??????????????????????????????????????????1='centered'?????????2?'co-sited'????????</p>
     */
    public static final Property yCbCrPositioning = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#yCbCrPositioning" );
    
    /** <p>The sampling ratio of chrominance components in relation to the luminance 
     *  component. In JPEG compressed data a JPEG marker is used instead of this tag.</p>
     */
    public static final Property yCbCrSubSampling = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#yCbCrSubSampling" );
    
    /** <p>The number of pixels per ResolutionUnit in the ImageLength direction. The 
     *  same value as XResolution is designated.???????????????</p>
     */
    public static final Property yResolution = m_model.createProperty( "http://www.w3.org/2003/12/exif/ns#yResolution" );
    
}
